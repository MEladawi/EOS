Microsoft (R) Macro Assembler Version 6.14.8444		    04/04/11 19:40:03
D:\EOS\Test\BootStrap\Main.asm				     Page 1 - 1


				;							          _____                   _______                   _____          
				;							         /\    \                 /::\    \                 /\    \         
				;							        /::\    \               /::::\    \               /::\    \        
				;							       /::::\    \             /::::::\    \             /::::\    \       
				;							      /::::::\    \           /::::::::\    \           /::::::\    \      
				;							     /:::/\:::\    \         /:::/~~\:::\    \         /:::/\:::\    \     
				;							    /:::/__\:::\    \       /:::/    \:::\    \       /:::/__\:::\    \    
				;							   /::::\   \:::\    \     /:::/    / \:::\    \      \:::\   \:::\    \   
				;							  /::::::\   \:::\    \   /:::/____/   \:::\____\   ___\:::\   \:::\    \  
				;							 /:::/\:::\   \:::\    \ |:::|    |     |:::|    | /\   \:::\   \:::\    \ 
				;							/:::/__\:::\   \:::\____\|:::|____|     |:::|    |/::\   \:::\   \:::\____\
				;							\:::\   \:::\   \::/    / \:::\    \   /:::/    / \:::\   \:::\   \::/    /
				;							 \:::\   \:::\   \/____/   \:::\    \ /:::/    /   \:::\   \:::\   \/____/ 
				;							  \:::\   \:::\    \        \:::\    /:::/    /     \:::\   \:::\    \     
				;							   \:::\   \:::\____\        \:::\__/:::/    /       \:::\   \:::\____\    
				;							    \:::\   \::/    /         \::::::::/    /         \:::\  /:::/    /    
				;							     \:::\   \/____/           \::::::/    /           \:::\/:::/    /     
				;							      \:::\    \                \::::/    /             \::::::/    /      
				;							       \:::\____\                \::/____/               \::::/    /       
				;							        \::/    /                 ~~                      \::/    /        
				;							         \/____/  '11 Grad project                         \/____/         
				;							                                                                           



				;This module serves as bootstrap which is at bootsector!
				;It's main function is to load a operating system initializer which in turn initializes the system and load our 32bit kernel :D



				.model tiny
				.686P
 0000				.code
				ORG 0h


				;Definitions::::::::::::::::::::::::::::::::::::::::::::::::
 = 0005				KernelSize				= 5
 = 00010000			PMode_KernelBase		= 10000h
 = 9000				RMode_KernelBase		= 9000h
 = 0500				RMode_KernelStackBase		= 500h
 = 7BFF				RMode_KernelStackPTR		= 7BFFh
				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;



 0000				Go proc  ;Just jump function to bypass the inluded functions (Remember we use Tiny model !!)
 0000  E9 00EE				jmp main
 0003				Go endp



				;Include Area-------------------------------------------------------------------------
				include ..\LIB\Print16.inc
			      C ;							          _____                   _______                   _____          
			      C ;							         /\    \                 /::\    \                 /\    \         
			      C ;							        /::\    \               /::::\    \               /::\    \        
			      C ;							       /::::\    \             /::::::\    \             /::::\    \       
			      C ;							      /::::::\    \           /::::::::\    \           /::::::\    \      
			      C ;							     /:::/\:::\    \         /:::/~~\:::\    \         /:::/\:::\    \     
			      C ;							    /:::/__\:::\    \       /:::/    \:::\    \       /:::/__\:::\    \    
			      C ;							   /::::\   \:::\    \     /:::/    / \:::\    \      \:::\   \:::\    \   
			      C ;							  /::::::\   \:::\    \   /:::/____/   \:::\____\   ___\:::\   \:::\    \  
			      C ;							 /:::/\:::\   \:::\    \ |:::|    |     |:::|    | /\   \:::\   \:::\    \ 
			      C ;							/:::/__\:::\   \:::\____\|:::|____|     |:::|    |/::\   \:::\   \:::\____\
			      C ;							\:::\   \:::\   \::/    / \:::\    \   /:::/    / \:::\   \:::\   \::/    /
			      C ;							 \:::\   \:::\   \/____/   \:::\    \ /:::/    /   \:::\   \:::\   \/____/ 
			      C ;							  \:::\   \:::\    \        \:::\    /:::/    /     \:::\   \:::\    \     
			      C ;							   \:::\   \:::\____\        \:::\__/:::/    /       \:::\   \:::\____\    
			      C ;							    \:::\   \::/    /         \::::::::/    /         \:::\  /:::/    /    
			      C ;							     \:::\   \/____/           \::::::/    /           \:::\/:::/    /     
			      C ;							      \:::\    \                \::::/    /             \::::::/    /      
			      C ;							       \:::\____\                \::/____/               \::::/    /       
			      C ;							        \::/    /                 ~~                      \::/    /        
			      C ;							         \/____/  '11 Grad project                         \/____/         
			      C ;							                                                                           
			      C 
			      C 
			      C 
			      C 
 0003			      C print PROC 
 0003  60		      C pusha
 0004			      C start:
 0004  AC		      C 	lodsb
 0005  0A C0		      C 	or al,al
 0007  74 06		      C 	jz done
 0009  B4 0E		      C 	mov ah, 0eh
 000B  CD 10		      C 	int 10h
 000D  EB F5		      C jmp start
			      C 
 000F			      C done: 
 000F  61		      C popa
 0010  C3		      C ret
 0011			      C print ENDP
			      C 
			      C 
				include ..\LIB\Load16.inc
			      C ;							          _____                   _______                   _____          
			      C ;							         /\    \                 /::\    \                 /\    \         
			      C ;							        /::\    \               /::::\    \               /::\    \        
			      C ;							       /::::\    \             /::::::\    \             /::::\    \       
			      C ;							      /::::::\    \           /::::::::\    \           /::::::\    \      
			      C ;							     /:::/\:::\    \         /:::/~~\:::\    \         /:::/\:::\    \     
			      C ;							    /:::/__\:::\    \       /:::/    \:::\    \       /:::/__\:::\    \    
			      C ;							   /::::\   \:::\    \     /:::/    / \:::\    \      \:::\   \:::\    \   
			      C ;							  /::::::\   \:::\    \   /:::/____/   \:::\____\   ___\:::\   \:::\    \  
			      C ;							 /:::/\:::\   \:::\    \ |:::|    |     |:::|    | /\   \:::\   \:::\    \ 
			      C ;							/:::/__\:::\   \:::\____\|:::|____|     |:::|    |/::\   \:::\   \:::\____\
			      C ;							\:::\   \:::\   \::/    / \:::\    \   /:::/    / \:::\   \:::\   \::/    /
			      C ;							 \:::\   \:::\   \/____/   \:::\    \ /:::/    /   \:::\   \:::\   \/____/ 
			      C ;							  \:::\   \:::\    \        \:::\    /:::/    /     \:::\   \:::\    \     
			      C ;							   \:::\   \:::\____\        \:::\__/:::/    /       \:::\   \:::\____\    
			      C ;							    \:::\   \::/    /         \::::::::/    /         \:::\  /:::/    /    
			      C ;							     \:::\   \/____/           \::::::/    /           \:::\/:::/    /     
			      C ;							      \:::\    \                \::::/    /             \::::::/    /      
			      C ;							       \:::\____\                \::/____/               \::::/    /       
			      C ;							        \::/    /                 ~~                      \::/    /        
			      C ;							         \/____/  '11 Grad project                         \/____/         
			      C ;							                                                                           
			      C 
			      C ;Variables
 0011 00		      C Sector    Byte     ?
 0012 00		      C Head      Byte     ?
 0013 00		      C Cylinder  Byte     ?
			      C 
			      C 
			      C 
			      C 
 0014			      C InitializeDrive PROC 
 0014  60		      C pusha
 0015			      C Begin:
 0015  33 DB		      C 	xor bx, bx
 0017  32 D2		      C 	xor dl, dl
 0019  32 E4		      C 	xor ah, ah
 001B  CD 13		      C 	int 13h
 001D  72 F6		      C jc Begin
 001F  61		      C popa
 0020  C3		      C 	RET
 0021			      C InitializeDrive ENDP
			      C 
			      C 
			      C 
 0021			      C CnvrtAd PROC
 0021  60		      C pusha
			      C 
			      C ;This covert LBA address to CHS address.
			      C ;Input: LBA value given in AX register.
			      C ;o/p are : cylinder, head and Sector variables : in main module.	   
			      C 	
			      C 
			      C 	;Symbolic constants !
 = 0012			      C 	SectorPerTrack = 18
 = 0002			      C 	NoHeads = 2
 = 0200			      C 	BytesPerSector = 512
			      C 	
			      C 	;Sector = (LBA mod SectorsPerTrack)+1
			      C 	;Cylinder = (LBA/SectorsPerTrack)/NumHeads
			      C 	;Head = (LBA/SectorsPerTrack) mod NumHeads
			      C 	
			      C 	
			      C 	;**LBA/Sectors Per Track:
			      C 	;Quotient(Ax) : NumberOfTrack    Remainder(Dx) + 1 : Sector
 0022  33 D2		      C 	xor dx, dx
 0024  33 DB		      C 	xor bx,bx
 0026  BB 0012		      C 	mov Bx, SectorPerTrack
 0029  F7 F3		      C 	Div Bx
 002B  FE C2		      C 	inc dl
 002D  88 16 0011 R	      C 	mov Sector, dl
			      C 	
			      C 	
			      C 	;**Number Of Tracks(Ax)/Number Of Heads:
			      C 	;Quotient(Al) : Cylinder  ,   Remainder(Ah) : Head
 0031  33 D2		      C 	XOR Dx, Dx
 0033  BB 0002		      C 	mov Bx, NoHeads
 0036  F7 F3		      C 	Div Bx
 0038  A2 0013 R	      C 	mov Cylinder, al
 003B  88 16 0012 R	      C 	mov Head, dl
			      C 	
			      C 	
 003F  61		      C popa
 0040  C3		      C 	RET
 0041			      C CnvrtAd ENDP
			      C 
			      C 
			      C 
 0041			      C Load PROC
			      C 
			      C ;receives Ax as start sector, Cx as no of sectors and Bx as address of loaded data
			      C 
 0041  E8 FFD0		      C 	CALL InitializeDrive
			      C 
 0044			      C LoadBegin:
			      C 	
 0044  BF 000A		      C 	mov di, 0Ah  ;Dx is loop to try to load a sector 10 times.
			      C 	
			      C 	; for wait dots :D
 0047  BE 01A2 R	      C 	mov si, offset WaitMsg
 004A  E8 FFB6		      C 	call print
			      C 		
 004D			      C 	SectorTrial:
 004D  50		      C 		push ax
 004E  52		      C 		push dx
 004F  51		      C 		push cx
			      C 				
			      C 		;Convert address
 0050  E8 FFCE		      C 		call CnvrtAd
			      C 
			      C 		; Interrupt 13h to read sector
 0053  B4 02		      C 		mov ah, 2
 0055  B0 01		      C 		mov al, 1
 0057  8A 2E 0013 R	      C 		mov ch, cylinder
 005B  8A 0E 0011 R	      C 		mov cl, sector
 005F  8A 36 0012 R	      C 		mov dh, head
 0063  B2 00		      C 		mov dl, 0
 0065  CD 13		      C 		int 13h
			      C 		
 0067  73 08		      C 		jnc  NextSec ;if carry there is error so we retry, else load next sector
			      C 		
 0069  4F		      C 		dec Di  ;Decrement loop of error trials
 006A  74 18		      C 		jz failure ;Di=0
			      C 		
 006C  59		      C 		pop cx 
 006D  5A		      C 		pop dx
 006E  58		      C 		pop ax
			      C 			
 006F  EB DC		      C 	jmp SectorTrial
			      C 	
 0071			      C NextSec:
 0071  59		      C 	pop cx
 0072  5A		      C 	pop dx
 0073  58		      C 	pop ax
 0074  81 C3 0200	      C 	add bx, BytesPerSector   ;next memory location for next sector
 0078  40		      C 	inc Ax	   ;Next sector LBA
 0079  49		      C 	dec Cx ;Decrease counter of no of sectors
 007A  75 C8		      C jnz LoadBegin
			      C 
			      C 
			      C 
 007C  BE 015F R	      C 	mov si, offset DoneMsg
 007F  E8 FF81		      C 	call print
			      C 	
 0082  EB 12		      C 	jmp finish
			      C 	
			      C 
			      C 	
 0084			      C Failure:
 0084  BE 016C R	      C           mov si, offset FailMsg
 0087  E8 FF79		      C           call    Print
 008A  BE 0188 R	      C           mov si, offset RebootMsg
 008D  E8 FF73		      C           call print
			      C           
			      C           ;Reboot   :(   after user press key
 0090  B4 00		      C           mov ah, 0
 0092  CD 16		      C           int  16h    ; wait key press
 0094  CD 19		      C           int  19h    ; Reboot computer	
			      C 	
			      C 
 0096			      C finish:
 0096  C3		      C 	RET
			      C 	
 0097			      C Load ENDP
			      C 
			      C 
			      C 
			      C 
				include ..\LIB\a20.inc
			      C ;							          _____                   _______                   _____          
			      C ;							         /\    \                 /::\    \                 /\    \         
			      C ;							        /::\    \               /::::\    \               /::\    \        
			      C ;							       /::::\    \             /::::::\    \             /::::\    \       
			      C ;							      /::::::\    \           /::::::::\    \           /::::::\    \      
			      C ;							     /:::/\:::\    \         /:::/~~\:::\    \         /:::/\:::\    \     
			      C ;							    /:::/__\:::\    \       /:::/    \:::\    \       /:::/__\:::\    \    
			      C ;							   /::::\   \:::\    \     /:::/    / \:::\    \      \:::\   \:::\    \   
			      C ;							  /::::::\   \:::\    \   /:::/____/   \:::\____\   ___\:::\   \:::\    \  
			      C ;							 /:::/\:::\   \:::\    \ |:::|    |     |:::|    | /\   \:::\   \:::\    \ 
			      C ;							/:::/__\:::\   \:::\____\|:::|____|     |:::|    |/::\   \:::\   \:::\____\
			      C ;							\:::\   \:::\   \::/    / \:::\    \   /:::/    / \:::\   \:::\   \::/    /
			      C ;							 \:::\   \:::\   \/____/   \:::\    \ /:::/    /   \:::\   \:::\   \/____/ 
			      C ;							  \:::\   \:::\    \        \:::\    /:::/    /     \:::\   \:::\    \     
			      C ;							   \:::\   \:::\____\        \:::\__/:::/    /       \:::\   \:::\____\    
			      C ;							    \:::\   \::/    /         \::::::::/    /         \:::\  /:::/    /    
			      C ;							     \:::\   \/____/           \::::::/    /           \:::\/:::/    /     
			      C ;							      \:::\    \                \::::/    /             \::::::/    /      
			      C ;							       \:::\____\                \::/____/               \::::/    /       
			      C ;							        \::/    /                 ~~                      \::/    /        
			      C ;							         \/____/  '11 Grad project                         \/____/         
			      C ;							                                                                           
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C 
			      C ;The 8042 controller contains the following registers:
			      C ;
			      C ;A one-byte input buffer - contains byte read from keyboard; read-only
			      C ;A one-byte output buffer - contains byte to-be-written to keyboard; write-only
			      C ;A one-byte status register - 8 status flags; read-only
			      C ;A one-byte control register - 7 control flags; read/write 
			      C 
			      C 
			      C 
			      C ;8043 Keyboard Controller Status Register is at 64h port address
			      C ;Bit 0:
			      C 	;Output Buffer Full-A 0 indicates that the keyboard
			      C 	;controller's output buffer has no data. A 1 indicates that
			      C 	;the controller has placed data into its output buffer but
			      C 	;the system has not yet read the data. When the system
			      C 	;reads the output buffer (1/0 address hex 60), this bit will
			      C 	;return to a 0. (With instruction IN)
			      C ;Bit 1:
			      C 	;Input Buffer Full-A 0 indicates that the keyboard
			      C 	;controller's input buffer (1/0 address hex 60 or 64) is
			      C 	;empty. A 1 indicates that data has been written into the
			      C 	;buffer but the controller has not read the data. When the
			      C 	;controller reads the input buffer, this bit will return to 0.(With instruction OUT)
			      C 
 0097			      C WaitKB_IP PROC USES Ax
			      C 
 0098			      C Begin_WaitKB_IP:
 0098  E4 64		      C 	in al, 64h
 009A  A8 02		      C 	Test al, 2h
 009C  75 FA		      C jnz Begin_WaitKB_IP
			      C 
			      C 	RET
 00A0			      C WaitKB_IP ENDP
			      C 
 00A0			      C WaitKB_OP PROC USES Ax
 00A1			      C Begin_WaitKB_OP:
 00A1  E4 64		      C 	in al, 64h
 00A3  A8 01		      C 	Test al, 1h
 00A5  74 FA		      C jz Begin_WaitKB_OP
			      C 	RET
 00A9			      C WaitKB_OP ENDP
			      C 
			      C 
			      C 
			      C ;**Controller command used in next proc::
			      C ;D0h:
			      C 	;Read Output Port-This command causes the controller
			      C 	;to read its output port and place the data in its output
			      C 	;buffer. This command should be issued only if the output
			      C 	;buffer is empty.
			      C ;D1h:
			      C 	;Write Output Port-The next byte of data written to I/0
			      C 	;address hex 60 is placed in the controller's output port.
			      C 
			      C ;ADh:
			      C 	;Disable Keyboard Feature-This command sets bit 4 of
			      C 	;the controller's command byte. This disables the
			      C 	;keyboard interface by driving the clock line low. Data
			      C 	;will not be sent or received.
			      C 
			      C ;AEh:
			      C 	;Enable Keyboard Interface-This command clears bit 4
			      C 	;of the command byte, which releases the keyboard
			      C 	;interface.
 00A9			      C EnableA20 PROC
 00A9  60		      C pusha
			      C 	;Diable keyboard
 00AA  E8 FFEA		      C 	call WaitKB_IP ;wait I/P buffer
 00AD  B0 AD		      C 	mov al, 0ADh
 00AF  E6 64		      C 	OUT 64h, al
			      C 
			      C 
 00B1			      C Start_EnableA20:
			      C 	;This cause the o/p port to be written to output bufer, then wait it to finish
 00B1  E8 FFE3		      C 	call WaitKB_IP
 00B4  B0 D0		      C 	mov al, 0D0h
 00B6  E6 64		      C 	out 64h, al
			      C 	
			      C 	
			      C 	;Read the o/p port data that exists in o/p buffer 
 00B8  E8 FFE5		      C 	call WaitKB_op
 00BB  E4 60		      C 	IN al, 60h
 00BD  8A D8		      C 	mov bl, al
			      C 	
			      C 	
			      C 	;Send Data we want to put in o/p port later to I/P buffer
 00BF  E8 FFD5		      C 	call WaitKB_IP
 00C2  B0 D1		      C 	mov al, 0D1h
 00C4  E6 64		      C 	OUT 64h, al
			      C 	
			      C 	
			      C 	;Set second bit ; of A20
 00C6  E8 FFCE		      C 	call WaitKB_IP
 00C9  8A C3		      C 	mov al, bl
 00CB  0C 02		      C 	OR al, 2h
 00CD  E6 60		      C 	OUT 60h, al
			      C 	
			      C 
			      C 	;make sure that A20 bit is set
 00CF  E8 FFC5		      C 	call WaitKB_IP
 00D2  B0 D0		      C 	mov al, 0D0h
 00D4  E6 64		      C 	out 64h, al
 00D6  E8 FFC7		      C 	call WaitKB_OP
 00D9  E4 60		      C 	IN al, 60h
 00DB  A8 02		      C 	Test al, 2
 00DD  74 D2		      C JZ Start_EnableA20
			      C 
			      C 	;Enable keyboard
 00DF  E8 FFB5		      C 	call WaitKB_IP
 00E2  B0 AE		      C 	mov al, 0AEh
 00E4  E6 64		      C 	OUT 64h, al
 00E6  E8 FFAE		      C 	call WaitKB_IP
			      C 	
 00E9  61		      C popa
 00EA  C3		      C 	RET
 00EB			      C EnableA20 ENDP
			      C 
			      C 
				include ..\LIB\GDT.inc
			      C ;							          _____                   _______                   _____          
			      C ;							         /\    \                 /::\    \                 /\    \         
			      C ;							        /::\    \               /::::\    \               /::\    \        
			      C ;							       /::::\    \             /::::::\    \             /::::\    \       
			      C ;							      /::::::\    \           /::::::::\    \           /::::::\    \      
			      C ;							     /:::/\:::\    \         /:::/~~\:::\    \         /:::/\:::\    \     
			      C ;							    /:::/__\:::\    \       /:::/    \:::\    \       /:::/__\:::\    \    
			      C ;							   /::::\   \:::\    \     /:::/    / \:::\    \      \:::\   \:::\    \   
			      C ;							  /::::::\   \:::\    \   /:::/____/   \:::\____\   ___\:::\   \:::\    \  
			      C ;							 /:::/\:::\   \:::\    \ |:::|    |     |:::|    | /\   \:::\   \:::\    \ 
			      C ;							/:::/__\:::\   \:::\____\|:::|____|     |:::|    |/::\   \:::\   \:::\____\
			      C ;							\:::\   \:::\   \::/    / \:::\    \   /:::/    / \:::\   \:::\   \::/    /
			      C ;							 \:::\   \:::\   \/____/   \:::\    \ /:::/    /   \:::\   \:::\   \/____/ 
			      C ;							  \:::\   \:::\    \        \:::\    /:::/    /     \:::\   \:::\    \     
			      C ;							   \:::\   \:::\____\        \:::\__/:::/    /       \:::\   \:::\____\    
			      C ;							    \:::\   \::/    /         \::::::::/    /         \:::\  /:::/    /    
			      C ;							     \:::\   \/____/           \::::::/    /           \:::\/:::/    /     
			      C ;							      \:::\    \                \::::/    /             \::::::/    /      
			      C ;							       \:::\____\                \::/____/               \::::/    /       
			      C ;							        \::/    /                 ~~                      \::/    /        
			      C ;							         \/____/  '11 Grad project                         \/____/         
			      C ;							                                                                           
			      C 
			      C 
			      C 
			      C 
			      C 
 00EB			      C SetGDT PROC
			      C 
			      C 	;mov BX, (offset GDT_Info) 
 00EB  0F 01 16 01BC R	      C 	lgdt FWord PTR GDT_Info
			      C 	
 00F0  C3		      C 	RET
 00F1			      C SetGDT ENDP
			      C 
				;--------------------------------------------------------------------------------------------


 00F1				main PROC

					;prepare the DS segment register to 7c00h ->start at 7c0:0=7c00 and es to 0h
 00F1  FA				cli
 00F2  FC				cld
 00F3  B8 07C0				mov ax, 7c0h
 00F6  8E D8				mov ds, ax
 00F8  33 C0				xor ax,ax
 00FA  8E C0				mov es, ax
					
					;Setting up the real time kernel stack: revice the memory map  this is the free space between bda and bootloader .. (Marsoma 3andy) - about 30KB
 00FC  B8 0500				mov ax, 500h
 00FF  8E D0				mov ss, ax
 0101  BC 7BFF				mov sp, 7bffh 
 0104  FB				sti
					
					
					;printing text using interrupt
 0105  BE 013A R			mov si, offset LdMsg	
 0108  E8 FEF8				call print
					
					;Load kernel temp. to 9000h
 010B  B9 0005				mov cx, KernelSize
 010E  B8 0001				mov Ax, 1h
 0111  BB 9000				mov Bx, RMode_KernelBase
 0114  E8 FF2A				call Load
					
					
					;1-establish GDT:--------------------------------------
 0117  FA				cli
 0118  E8 FFD0				call SetGDT
					;--------------------------------------------------------------

					;2-Enable A20:-------------------------------------------------
 011B  E8 FF8B				call EnableA20
					;-------------------------------------------------------------------

					;3-Change CR0 (PE) bit to 1:--------------------------
 011E  0F 01 E2				smsw	dx
 0121  83 CA 01				OR	dx, 1h
 0124  0F 01 F2				lmsw	dx
					;-------------------------------------------------------------------

					;Make far jump manually ; ) -----------------------------
 0127  6A 08				push 8h  				;Cs: selector
 0129  68 7E00				push (7E00h)				;offset
 012C  CB				retf
					;-----------------------------------------------------------------------
					
					
					
					;reboot
 012D  FB				sti
 012E  BE 0188 R			mov si, offset rebootmsg
 0131  E8 FECF				call print
 0134  B4 00				mov ah, 0
 0136  CD 16			          int  16h    ; wait key press
 0138  CD 19			          int  19h    ; Reboot computer	

 013A				main ENDP




				;Data;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

				;Messages**********************************************************************************************************
 013A 4C 6F 61 64 69 6E		LdMsg             Byte     "Loading operating system initializer", 0
       67 20 6F 70 65 72
       61 74 69 6E 67 20
       73 79 73 74 65 6D
       20 69 6E 69 74 69
       61 6C 69 7A 65 72
       00
 015F 20 5B 44 6F 6E 65		DoneMsg         Byte     " [Done]",0Dh, 0Ah, 0
       5D 0D 0A 00
 0169 0D 0A 00			NewLineMsg    Byte      0Dh, 0Ah, 0 
 016C 4F 6F 70 73 21 20		FailMsg           Byte      "Oops! fatal error occured",0Dh, 0Ah, 0
       66 61 74 61 6C 20
       65 72 72 6F 72 20
       6F 63 63 75 72 65
       64 0D 0A 00
 0188 50 72 65 73 73 20		RebootMsg     Byte       "Press any key to reboot", 0Dh, 0Ah, 0 
       61 6E 79 20 6B 65
       79 20 74 6F 20 72
       65 62 6F 6F 74 0D
       0A 00
 01A2 2E 00			WaitMsg          Byte      ".",0



				;GDT Data structure*******************************************************************************************************
 01A4				NullGD	QWord	0h
       0000000000000000

 01AC				CodeGD	QWord	0000000011001111100110100000000000000000000000001111111111111111b
       00CF9A000000FFFF

 01B4				DataGD	QWord	0000000011001111100100100000000000000000000000001111111111111111b
       00CF92000000FFFF



				;GDTR Data********************************************************************************************************************
 01BC 0017			GDT_Info	Word		(offset GDT_Info) - (offset NullGD) -1
 01BE  7DA4 0000 R				DWord	(offset NullGD) + 7C00h 	;to get absolute address :D

				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


				END

Microsoft (R) Macro Assembler Version 6.14.8444		    04/04/11 19:40:03
D:\EOS\Test\BootStrap\Main.asm				     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

DGROUP . . . . . . . . . . . . .	GROUP
_TEXT  . . . . . . . . . . . . .	16 Bit	 01C2	  Word	  Public  'CODE'	
_DATA  . . . . . . . . . . . . .	16 Bit	 0000	  Word	  Public  'DATA'	


Procedures,  parameters and locals:

                N a m e                 Type     Value    Attr

CnvrtAd  . . . . . . . . . . . .	P Near	 0021	  _TEXT	Length= 0020 Public
EnableA20  . . . . . . . . . . .	P Near	 00A9	  _TEXT	Length= 0042 Public
  Start_EnableA20  . . . . . . .	L Near	 00B1	  _TEXT	
Go . . . . . . . . . . . . . . .	P Near	 0000	  _TEXT	Length= 0003 Public
InitializeDrive  . . . . . . . .	P Near	 0014	  _TEXT	Length= 000D Public
  Begin  . . . . . . . . . . . .	L Near	 0015	  _TEXT	
Load . . . . . . . . . . . . . .	P Near	 0041	  _TEXT	Length= 0056 Public
  LoadBegin  . . . . . . . . . .	L Near	 0044	  _TEXT	
  SectorTrial  . . . . . . . . .	L Near	 004D	  _TEXT	
  NextSec  . . . . . . . . . . .	L Near	 0071	  _TEXT	
  Failure  . . . . . . . . . . .	L Near	 0084	  _TEXT	
  finish . . . . . . . . . . . .	L Near	 0096	  _TEXT	
SetGDT . . . . . . . . . . . . .	P Near	 00EB	  _TEXT	Length= 0006 Public
WaitKB_IP  . . . . . . . . . . .	P Near	 0097	  _TEXT	Length= 0009 Public
  Begin_WaitKB_IP  . . . . . . .	L Near	 0098	  _TEXT	
WaitKB_OP  . . . . . . . . . . .	P Near	 00A0	  _TEXT	Length= 0009 Public
  Begin_WaitKB_OP  . . . . . . .	L Near	 00A1	  _TEXT	
main . . . . . . . . . . . . . .	P Near	 00F1	  _TEXT	Length= 0049 Public
print  . . . . . . . . . . . . .	P Near	 0003	  _TEXT	Length= 000E Public
  start  . . . . . . . . . . . .	L Near	 0004	  _TEXT	
  done . . . . . . . . . . . . .	L Near	 000F	  _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 0000h	 
@DataSize  . . . . . . . . . . .	Number	 0000h	 
@Interface . . . . . . . . . . .	Number	 0000h	 
@Model . . . . . . . . . . . . .	Number	 0001h	 
@code  . . . . . . . . . . . . .	Text   	 DGROUP
@data  . . . . . . . . . . . . .	Text   	 DGROUP
@fardata?  . . . . . . . . . . .	Text   	 FAR_BSS
@fardata . . . . . . . . . . . .	Text   	 FAR_DATA
@stack . . . . . . . . . . . . .	Text   	 DGROUP
BytesPerSector . . . . . . . . .	Number	 0200h	 
CodeGD . . . . . . . . . . . . .	QWord	 01AC	  _TEXT	
Cylinder . . . . . . . . . . . .	Byte	 0013	  _TEXT	
DataGD . . . . . . . . . . . . .	QWord	 01B4	  _TEXT	
DoneMsg  . . . . . . . . . . . .	Byte	 015F	  _TEXT	
FailMsg  . . . . . . . . . . . .	Byte	 016C	  _TEXT	
GDT_Info . . . . . . . . . . . .	Word	 01BC	  _TEXT	
Head . . . . . . . . . . . . . .	Byte	 0012	  _TEXT	
KernelSize . . . . . . . . . . .	Number	 0005h	 
LdMsg  . . . . . . . . . . . . .	Byte	 013A	  _TEXT	
NewLineMsg . . . . . . . . . . .	Byte	 0169	  _TEXT	
NoHeads  . . . . . . . . . . . .	Number	 0002h	 
NullGD . . . . . . . . . . . . .	QWord	 01A4	  _TEXT	
PMode_KernelBase . . . . . . . .	Number	 00010000h   
RMode_KernelBase . . . . . . . .	Number	 9000h	 
RMode_KernelStackBase  . . . . .	Number	 0500h	 
RMode_KernelStackPTR . . . . . .	Number	 7BFFh	 
RebootMsg  . . . . . . . . . . .	Byte	 0188	  _TEXT	
SectorPerTrack . . . . . . . . .	Number	 0012h	 
Sector . . . . . . . . . . . . .	Byte	 0011	  _TEXT	
WaitMsg  . . . . . . . . . . . .	Byte	 01A2	  _TEXT	

	   0 Warnings
	   0 Errors
